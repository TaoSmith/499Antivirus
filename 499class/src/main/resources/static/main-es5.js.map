{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_components/alert.component.ts","webpack:///src/app/_components/alert.component.html","webpack:///src/app/_components/index.ts","webpack:///src/app/_helpers/auth.guard.ts","webpack:///src/app/_helpers/error.interceptor.ts","webpack:///src/app/_helpers/index.ts","webpack:///src/app/_helpers/jwt.interceptor.ts","webpack:///src/app/_models/ScanHistory.ts","webpack:///src/app/_models/alert.ts","webpack:///src/app/_models/index.ts","webpack:///src/app/_models/user.ts","webpack:///src/app/_services/account.service.ts","webpack:///src/app/_services/alert.service.ts","webpack:///src/app/_services/index.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/home/index.ts","webpack:///src/app/users/add-edit.component.ts","webpack:///src/app/users/add-edit.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AlertComponent","router","alertService","fade","alerts","alertSubscription","onAlert","subscribe","alert","message","filter","x","keepAfterRouteChange","forEach","push","autoClose","setTimeout","removeAlert","routeSubscription","events","event","clear","unsubscribe","includes","classes","alertTypeClass","Success","Info","Warning","type","join","selector","templateUrl","AuthGuard","accountService","route","state","user","userValue","navigate","queryParams","returnUrl","url","providedIn","ErrorInterceptor","request","next","handle","pipe","err","status","logout","error","statusText","console","JwtInterceptor","isLoggedIn","token","isApiUrl","startsWith","apiUrl","clone","setHeaders","Authorization","ScanHistory","Alert","init","Object","assign","AlertType","User","AccountService","http","userSubject","JSON","parse","localStorage","getItem","asObservable","username","password","post","setItem","stringify","removeItem","formData","FormData","append","userName","get","put","file","value","AlertService","subject","defaultId","options","accountModule","AccountModule","usersModule","UsersModule","routes","path","component","canActivate","loadChildren","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","AppModule","provide","useClass","multi","declarations","providers","bootstrap","HomeComponent","errorMsg","selectedFiles","target","files","item","currentFile","upload","report","bool","undefined","onFileSelected","AddEditComponent","formBuilder","loading","submitted","snapshot","params","passwordValidators","minLength","isAddMode","required","form","group","firstName","lastName","getById","patchValue","invalid","createUser","updateUser","register","success","relativeTo","update","controls","onSubmit","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { Alert, AlertType } from '@app/_models';\nimport { AlertService } from '@app/_services';\n\n@Component({ selector: 'alert', templateUrl: 'alert.component.html' })\nexport class AlertComponent implements OnInit, OnDestroy {\n    @Input() id = 'default-alert';\n    @Input() fade = true;\n\n    alerts: Alert[] = [];\n    alertSubscription: Subscription;\n    routeSubscription: Subscription;\n\n    constructor(private router: Router, private alertService: AlertService) { }\n\n    ngOnInit() {\n        // subscribe to new alert notifications\n        this.alertSubscription = this.alertService.onAlert(this.id)\n            .subscribe(alert => {\n                // clear alerts when an empty alert is received\n                if (!alert.message) {\n                    // filter out alerts without 'keepAfterRouteChange' flag\n                    this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n\n                    // remove 'keepAfterRouteChange' flag on the rest\n                    this.alerts.forEach(x => delete x.keepAfterRouteChange);\n                    return;\n                }\n\n                // add alert to array\n                this.alerts.push(alert);\n\n                // auto close alert if required\n                if (alert.autoClose) {\n                    setTimeout(() => this.removeAlert(alert), 3000);\n                }\n           });\n\n        // clear alerts on location change\n        this.routeSubscription = this.router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                this.alertService.clear(this.id);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        // unsubscribe to avoid memory leaks\n        this.alertSubscription.unsubscribe();\n        this.routeSubscription.unsubscribe();\n    }\n\n    removeAlert(alert: Alert) {\n        // check if already removed to prevent error on auto close\n        if (!this.alerts.includes(alert)) return;\n\n        if (this.fade) {\n            // fade out alert\n            alert.fade = true;\n\n            // remove alert after faded out\n            setTimeout(() => {\n                this.alerts = this.alerts.filter(x => x !== alert);\n            }, 250);\n        } else {\n            // remove alert\n            this.alerts = this.alerts.filter(x => x !== alert);\n        }\n    }\n\n    cssClass(alert: Alert) {\n        if (!alert) return;\n\n        const classes = ['alert', 'alert-dismissable', 'mt-4', 'container'];\n                \n        const alertTypeClass = {\n            [AlertType.Success]: 'alert alert-success',\n            [AlertType.Error]: 'alert alert-danger',\n            [AlertType.Info]: 'alert alert-info',\n            [AlertType.Warning]: 'alert alert-warning'\n        }\n\n        classes.push(alertTypeClass[alert.type]);\n\n        if (alert.fade) {\n            classes.push('fade');\n        }\n\n        return classes.join(' ');\n    }\n}","<div *ngFor=\"let alert of alerts\" class=\"{{cssClass(alert)}}\">\n    <a class=\"close\" (click)=\"removeAlert(alert)\">&times;</a>\n    <span [innerHTML]=\"alert.message\"></span>\n</div>","export * from './alert.component';\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AccountService } from '@app/_services';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const user = this.accountService.userValue;\n        if (user) {\n            // authorised so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AccountService } from '@app/_services';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private accountService: AccountService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if ([401, 403].includes(err.status) && this.accountService.userValue) {\n                // auto logout if 401 or 403 response returned from api\n                this.accountService.logout();\n            }\n\n            const error = err.error?.message || err.statusText;\n            console.error(err);\n            return throwError(error);\n        }))\n    }\n}","export * from './auth.guard';\nexport * from './error.interceptor';\nexport * from './jwt.interceptor';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@environments/environment';\nimport { AccountService } from '@app/_services';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private accountService: AccountService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add auth header with jwt if user is logged in and request is to the api url\n        const user = this.accountService.userValue;\n        const isLoggedIn = user && user.token;\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\n        if (isLoggedIn && isApiUrl) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${user.token}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n","export class ScanHistory {\r\n    fileName: string;\r\n    infectedStatus: boolean;\r\n    date: Date;\r\n}\r\n","export class Alert {\n    id: string;\n    type: AlertType;\n    message: string;\n    autoClose: boolean;\n    keepAfterRouteChange: boolean;\n    fade: boolean;\n\n    constructor(init?:Partial<Alert>) {\n        Object.assign(this, init);\n    }\n}\n\nexport enum AlertType {\n    Success,\n    Error,\n    Info,\n    Warning\n}","export * from './alert';\nexport * from './user';\nexport * from './ScanHistory'\n","export class User {\n    id: string;\n    userName: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    token: string;\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { User, ScanHistory } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private userSubject: BehaviorSubject<User>;\n    public user: Observable<User>;\n    public report: Observable<String>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.userSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('user')));\n        this.user = this.userSubject.asObservable();\n    }\n\n    public get userValue(): User {\n        return this.userSubject.value;\n    }\n\n    login(username, password) {\n        return this.http.post<User>(`${environment.apiUrl}/login`, { username, password })\n            .pipe(map(user => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(user));\n                this.userSubject.next(user);\n                return user;\n            }));\n    }\n\n    logout() {\n        // remove user from local storage and set current user to null\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/account/login']);\n    }\n\n    register(user: User) {\n        return this.http.post(`${environment.apiUrl}/addUserNow`, user);\n    }\n\n    getAll(user: User) {\n        const formData: FormData = new FormData();\n        formData.append('name', user.userName);\n        return this.http.post<ScanHistory[]>(`${environment.apiUrl}/getScanHistory`, formData);\n    }\n\n    getById(id: string) {\n        return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\n    }\n\n    update(user: User) {\n        return this.http.put(`${environment.apiUrl}/update`, user)\n            .pipe(map(x => {\n                localStorage.setItem('user', JSON.stringify(user));\n                this.userSubject.next(user);\n                return x;\n            }));\n    }\n\n    upload(file: File, user: User){\n        const formData: FormData = new FormData();\n        formData.append('file', file);\n        formData.append('name', user.userName);\n        return this.http.post<ScanHistory>(`${environment.apiUrl}/upload`, formData);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Alert, AlertType } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AlertService {\n    private subject = new Subject<Alert>();\n    private defaultId = 'default-alert';\n\n    // enable subscribing to alerts observable\n    onAlert(id = this.defaultId): Observable<Alert> {\n        return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n    }\n\n    // convenience methods\n    success(message: string, options?: any) {\n        this.alert(new Alert({ ...options, type: AlertType.Success, message }));\n    }\n\n    error(message: string, options?: any) {\n        this.alert(new Alert({ ...options, type: AlertType.Error, message }));\n    }\n\n    info(message: string, options?: any) {\n        this.alert(new Alert({ ...options, type: AlertType.Info, message }));\n    }\n\n    warn(message: string, options?: any) {\n        this.alert(new Alert({ ...options, type: AlertType.Warning, message }));\n    }\n\n    // main alert method    \n    alert(alert: Alert) {\n        alert.id = alert.id || this.defaultId;\n        this.subject.next(alert);\n    }\n\n    // clear alerts\n    clear(id = this.defaultId) {\n        this.subject.next(new Alert({ id }));\n    }\n}","export * from './account.service';\nexport * from './alert.service';\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home';\nimport { AuthGuard } from './_helpers';\nimport { AddEditComponent } from './users/add-edit.component'\n\nconst accountModule = () => import('./account/account.module').then(x => x.AccountModule);\nconst usersModule = () => import('./users/users.module').then(x => x.UsersModule);\n\nconst routes: Routes = [\n    { path: '', component: HomeComponent, canActivate: [AuthGuard] },\n    { path: 'users', loadChildren: usersModule, canActivate: [AuthGuard] },\n    { path: 'account', loadChildren: accountModule},\n    { path: 'update', component: AddEditComponent},\n\n    // otherwise redirect to home\n    { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\nimport { AccountService } from './_services';\nimport { User } from './_models';\n\n@Component({ selector: 'app', templateUrl: 'app.component.html' })\nexport class AppComponent {\n    user: User;\n\n    constructor(private accountService: AccountService) {\n        this.accountService.user.subscribe(x => this.user = x);\n    }\n\n    logout() {\n        this.accountService.logout();\n    }\n}","<!-- nav -->\n<nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"user\">\n    <div class=\"navbar-nav\">\n        <a class=\"nav-item nav-link\" routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">Home</a>\n        <a class=\"nav-item nav-link\" routerLink=\"/users\" routerLinkActive=\"active\">Scans</a>\n        <a class=\"nav-item nav-link\" routerLink=\"/update\" routerLinkActive=\"active\">User</a>\n        <a class=\"nav-item nav-link\" (click)=\"logout()\">Logout</a>\n    </div>\n</nav>\n\n<!-- main app container -->\n<div class=\"app-container\" [ngClass]=\"{ 'bg-light': user }\">\n    <alert></alert>\n    <router-outlet></router-outlet>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { JwtInterceptor, ErrorInterceptor } from './_helpers';\nimport { AppComponent } from './app.component';\nimport { AlertComponent } from './_components';\nimport { HomeComponent } from './home';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        AppRoutingModule\n    ],\n    declarations: [\n        AppComponent,\n        AlertComponent,\n        HomeComponent\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { };\n","import { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HttpClient, HttpEvent, HttpEventType, HttpResponse } from '@angular/common/http';\nimport { interval, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { User, ScanHistory } from '@app/_models';\nimport { AccountService } from '@app/_services';\n\n@Component({ templateUrl: 'home.component.html' })\nexport class HomeComponent {\n    user: User;\n    fileName: string;\n    uploadProgress: number;\n    selectedFiles?: FileList;\n    currentFile?: File;\n    message = '';\n    errorMsg = '';\n    report?: ScanHistory;\n    bool: boolean;\n\n\n    constructor(private accountService: AccountService, private http: HttpClient, private router: Router) {\n        this.user = this.accountService.userValue;\n    }\n\n    onFileSelected(event: any): void{\n      this.selectedFiles = event.target.files;\n    }\n\n    upload(): void {\n    this.errorMsg = '';\n\n    if (this.selectedFiles) {\n      const file: File | null = this.selectedFiles.item(0);\n\n      if (file) {\n        this.currentFile = file;\n        this.user = this.accountService.userValue;\n\n        this.accountService.upload(this.currentFile, this.user).subscribe(report => this.report = report)\n        this.bool = true;\n      }\n\n      this.selectedFiles = undefined;\n    }\n  }\n}\n","<div class=\"p-4\">\n    <div class=\"container\">\n        <h1>Hi {{user.firstName}}!</h1>\n        <p>Choose a file to scan</p>\n        <input type=\"file\" class=\"file-input\"\n       (change)=\"onFileSelected($event)\" #fileUpload>\n       <div class=\"col-4\">\n          <button class=\"btn btn-success btn-sm\" [disabled]=\"!selectedFiles\" (click)=\"upload()\">\n              Upload file\n          </button>\n      </div>\n      <table class=\"table table-striped\">\n          <thead>\n              <tr>\n                  <th style=\"width: 33%\">File Name</th>\n                  <th style=\"width: 33%\">Infected</th>\n                  <th style=\"width: 33%\">Date</th>\n              </tr>\n          </thead>\n          <tbody>\n              <tr *ngIf=\"bool==true\">\n                  <td>{{report.fileName}}</td>\n                  <td>{{report.infectedStatus}}</td>\n                  <td>{{report.date}}</td>\n              </tr>\n          </tbody>\n      </table>\n      <p><a routerLink=\"/users\">Check your Scan History</a></p>\n    </div>\n</div>\n","export * from './home.component';","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\n@Component({ templateUrl: 'add-edit.component.html' })\nexport class AddEditComponent implements OnInit {\n    form: FormGroup;\n    id: string;\n    isAddMode: boolean;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) {}\n\n    ngOnInit() {\n        this.id = this.route.snapshot.params['id'];\n        const passwordValidators = [Validators.minLength(6)];\n        if (this.isAddMode) {\n            passwordValidators.push(Validators.required);\n        }\n\n        this.form = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            userName: ['', Validators.required],\n            password: ['', passwordValidators]\n        });\n\n        if (!this.isAddMode) {\n            this.accountService.getById(this.id)\n                .pipe(first())\n                .subscribe(x => this.form.patchValue(x));\n        }\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        this.alertService.clear();\n\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        if (this.isAddMode) {\n            this.createUser();\n        } else {\n            this.updateUser();\n        }\n    }\n\n    private createUser() {\n        this.accountService.register(this.form.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('User added successfully', { keepAfterRouteChange: true });\n                    this.router.navigate(['../'], { relativeTo: this.route });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n\n    private updateUser() {\n        this.accountService.update(this.form.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Update successful', { keepAfterRouteChange: true });\n                    this.router.navigate(['../'], { relativeTo: this.route });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n}\n","<h1 *ngIf=\"isAddMode\">Add User</h1>\n<h1 *ngIf=\"!isAddMode\">Edit User</h1>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-row\">\n        <div class=\"form-group col\">\n            <label for=\"firstName\">First Name</label>\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\n            <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n            </div>\n        </div>\n        <div class=\"form-group col\">\n            <label for=\"lastName\">Last Name</label>\n            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n            <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"form-row\">\n        <div class=\"form-group col\">\n            <label for=\"userName\">Username</label>\n            <input type=\"text\" formControlName=\"userName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.userName.errors }\" />\n            <div *ngIf=\"submitted && f.userName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.userName.errors.required\">Username is required</div>\n            </div>\n        </div>\n        <div class=\"form-group col\">\n            <label for=\"password\">\n                Password\n                <em *ngIf=\"!isAddMode\">(Leave blank to keep the same password)</em>\n            </label>\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n            Save\n        </button>\n        <a routerLink=\"/users\" class=\"btn btn-link\">Cancel</a>\n    </div>\n</form>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));"]}